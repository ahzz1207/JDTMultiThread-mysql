created by jack wang on 2016/8/5
setindicatorcolor(0xff00ff00) or setindicatorcolor(color
your should use this to add animatorupdatelistener when create animator , otherwise , animator doesn't work when the animation restart
call this to submit the input tag
returns the input state tag in this group
returns the tag array in group, except the input tag
append a input tag to this group
append tag to this group
reads lines from standard input until a line's length is less than two or three lines have been read
equals generated by intellij
you should pay attention to pass this parameter with two way: for example: 1
classname#canonicalname} is not public
this test demonstrates the known problem of creating streams from mutable structures
lifts the function into the fully featured function wrapper
returns the display rendering of the given argument
returns the display rendering of the given argument
prints the given argument to the standard output stream with a new line
prints the given argument to the standard output stream
prints the given argument to the standard error stream with a new line
returns a show instance using the given function
a show instance for a vector-2
a show instance for a vector-3
a show instance for a vector-4
a show instance for a vector-5
a show instance for a vector-6
a show instance for a vector-7
a show instance for a vector-8
lifts the function into the fully featured function wrapper
compute the hash of the given value
construct a hash with the given hash function
a hash instance for a product-1
a hash instance for a vector-2
a hash instance for a vector-3
a hash instance for a vector-4
a hash instance for a vector-5
a hash instance for a vector-6
a hash instance for a vector-7
a hash instance for a vector-8
to avoid outofmemoryerrors)
maps the given functions across this monoid as an invariant functor
sums the two given arguments
returns a function that sums the given value according to this monoid
the zero value for this monoid
returns a value summed <code>n</code> times (<code>a + a +
sums the given values with right-fold
sums the given values with right-fold
sums the given values with left-fold
sums the given values with left-fold
intersperses the given value between each two elements of the iterable, and sums the result
swaps the arguments when summing
constructs a monoid from the given definition, which must follow the monoidal laws
constructs a monoid from the given definition, which must follow the monoidal laws
constructs a monoid from the given semigroup definition and zero value, which must follow the monoidal laws
constructs a monoid from the given sum function and zero value, which must follow the monoidal laws
constructs a monoid from the given sum function and zero value, which must follow the monoidal laws
constructs a monoid from the given semigroup and zero value, which must follow the monoidal laws
a monoid for functions
a monoid for lists
a monoid for options that take the first available value
a monoid for options that take the last available value
a monoid for streams
a monoid for arrays
a monoid for io values
a monoid for sets
a monoid for the maximum of elements with ordering o
sums a list of doubles
returns the product of a list of doubles
returns the first non-<code>null</code> value in the given list of optional values
returns the first value found in the list of visitors after application of the given value, otherwise returns the given default
returns the first non-<code>null</code> value found in the list of visitors after application of the given value, otherwise returns the given default
parses the input to produce a result or error
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
binds the given function across the parsers with a final join
performs function application within a parser
returns a parser that repeats application of this parser zero or many times
returns a parser that computes using the given function
returns a parser that produces an element from the stream that satisfies the given predicate, or fails
returns a parser that produces a character if one is available or fails with the given error
returns a parser that produces the given character or fails otherwise
returns a parser that produces the given number of characters, or fails with the given error
returns a parser that produces the given stream of characters or fails otherwise
returns a parser that produces a digit (0 to 9)
returns a parser that produces a lower-case character
returns a parser that produces a upper-case character
returns a parser that produces a defined character
returns a parser that produces a high-surrogate character
returns a parser that produces an identifier-ignorable character
returns a parser that produces an iso control character
returns a parser that produces a java identifier part character
returns a parser that produces a java identifier start character
returns a parser that produces an alpha character
returns a parser that produces an alpha-numeric character
returns a parser that produces a low-surrogate character
returns a parser that produces a mirrored character
returns a parser that produces a space character
returns a parser that produces a title-case character
returns a parser that produces a unicode identifier part character
returns a parser that produces a unicode identifier start character
returns a parser that produces a white-space character
maps the given function across the remainder of the parse input
maps the given function across the parse value
returns an iterator over the parse value
construct a result with the given remainder of the parse input and parse value
returns an error to represent undefinedness in a computation with early failure using the given message
maps this function over a synchronousqueue
maps this function over a priorityblockingqueue
maps this function over a linkedblockingqueue
maps this function over a copyonwritearrayset
maps this function over a copyonwritearraylist
maps this function over a concurrentlinkedqueue
maps this function over an arrayblockingqueue
maps this function over a treeset
maps this function over a priorityqueue
maps this function over a linkedlist
maps this function over an arraylist
promotes this function to a function on trees
promotes this function to zip two trees, applying the function lock-step over both trees
sums the two given arguments
returns a function that sums the given value according to this semigroup
returns a value summed <code>n + 1</code> times ( <code>a + a +
sums the given values with left-fold
sums the given values with left-fold, shortcutting the computation as early as possible
swaps the arguments when summing
lifts the semigroup to obtain a trivial monoid
maps the given functions across this monoid as an invariant functor
constructs a semigroup from the given definition
constructs a semigroup from the given definition
constructs a semigroup from the given function
a semigroup which always uses the "first" (left-hand side) value
a semigroup which always uses the "last" (right-hand side) value
a semigroup for non-empty lists
a lazy semigroup for unary products
returns an ordering for the given arguments
returns <code>true</code> if the given arguments are equal, <code>false</code> otherwise
maps the given function across this ord as a contra-variant functor
returns <code>true</code> if the first given argument is less than the second given argument, <code>false</code> otherwise
returns <code>true</code> if the first given argument is less than or equal to the second given argument, <code>false</code> otherwise
returns <code>true</code> if the first given argument is greater than the second given argument, <code>false</code> otherwise
returns a function that returns true if its argument is less than the argument to this method
returns a function that returns true if its argument is greater than than the argument to this method
returns the greater of its two arguments
returns an order instance that uses the given equality test and ordering function
returns an order instance that uses the given minimal equality test and ordering definition
returns an order instance that uses the given minimal equality test and ordering definition
an order instance for a product-1
an order instance for a product-2, with the first factor considered most significant
an order instance for a product-3, with the first factor considered most significant
an order instance for the <code>comparable</code> interface
this is not safe and therefore this method is deprecated
warning: this ordering violate antisymmetry on hash collisions
returns an iterator for this tree
creates a new tree given a root and a (potentially infinite) subforest
creates a new tree given a root and a (potentially infinite) subforest
creates a new n-ary given a root and a subforest of length n
puts the elements of the tree into a stream, in pre-order
provides a stream of the elements of the tree at each level, in level order
maps the given function over this tree
folds this tree using the given monoid
projects an immutable collection of this tree
folds a tree<a> into a tree<b> by applying the function f from the bottom of the tree to the top
constructs an empty tree map
constructs a tree map from the given elements
returns a potential value that the given key maps to
inserts the given key and value association into the tree map
deletes the entry in the tree map that corresponds to the given key
returns the number of entries in this tree map
determines if this tree map has any entries
returns all values in this tree map
returns all keys in this tree map
determines if the given key value exists in this tree map
returns an iterator for this map's key-value pairs
a mutable map projection of this tree map
an immutable projection of the given mutable map
modifies the value for the given key, if present, by applying the given function to it
modifies the value for the given key, if present, by applying the given function to it, or inserts the given value if the key is not present
splits this treemap at the given key
internal construction of a treemap from the given set
splits this treemap at the given key
maps the given function across the values of this treemap
returns the minimum (key, value) pair in the tree if the tree is not empty
returns the minimum key in the tree if the tree is not empty
returns the maximum (key, value) pair in the tree if the tree is not empty
returns the maximum key in the tree if the tree is not empty
the expression <code>t1
the expression <code>t1
creates a dlist from the function for alternatives functions to create a dlist:
concatenates all the internal lists together that are held in the dlist's lambda's state to produce a list
converts the dlist to a standard java
a empty dlist
produces a dlist with one element
prepends a single element on the dlist to produce a new dlist
appends a single element on the end of the dlist to produce a new dlist
appends two dlists together to produce a new dlist
returns an iterator for this map's keys
construct a hash map with the given equality and hashing strategy
construct a hash map with the given equality and hashing strategy
construct a hash map with the given equality and hashing strategy
construct a hash map
compare two key values for equality using the underlying equality strategy
compute the hash of the given key value using the underlying hashing strategy
returns a potential value that the given key maps to
clear all entries from this hash map
determines if the given key value exists in this hash map
returns all key entries in this hash map
returns all values in this hash map
determines if this hash map has any entries
returns the number of entries in this hash map
inserts the given key and value association into the hash map
deletes the entry in the hash map that corresponds to the given key
deletes the entry in the hash map that corresponds to the given key and returns any associated value
projects an immutable collection of this hash map
converts the iterable to a hashmap
creates a new zipper with the given streams before and after the focus, and the given focused item
creates a new zipper from the given triple
an ord instance for zippers
an equal instance for zippers
a show instance for zippers
maps the given function across the elements of this zipper (covariant functor pattern)
performs a right-fold reduction across this zipper
possibly create a zipper if the provided stream has at least one element, otherwise none
possibly create a zipper if the provided stream has at least one element, otherwise none
possibly moves the focus to the next element in the list
attempts to move the focus to the next element, or throws an error if there are no more elements
possibly moves the focus to the previous element in the list
attempts to move the focus to the previous element, or throws an error if there are no more elements
inserts an element to the left of the focus, then moves the focus to the new element
inserts an element to the right of the focus, then moves the focus to the new element
possibly deletes the element at the focus, then moves the element on the left into focus
possibly deletes the element at the focus, then moves the element on the right into focus
returns whether the focus is on the first element
returns whether the focus is on the last element
maps over variations of this zipper, such that the given function is applied to each variation (comonad pattern)
zips the elements of this zipper with a boolean that indicates whether that element has focus
move the focus to the specified index
moves the focus to the element matching the given predicate, if present
returns the index of the focus
move the focus to the next element
move the focus to the previous element
possibly deletes the element at the focus, then move the element on the left into focus
possibly deletes the element at the focus, then move the element on the right into focus
returns the stream representation of this zipper
returns an iterator of all the positions of this zipper, starting from the leftmost position
a singleton sequence
constructs a sequence from the iterable
inserts the given element at the front of this sequence
inserts the given element at the end of this sequence
the first element of this sequence
the last element of this sequence
the sequence without the first element
the sequence without the last element
converts this sequence to a stream
converts this sequence to a list
converts the sequence to a java
returns an iterator for this seq
appends the given sequence to this sequence
checks if this is the empty sequence
inserts the element at the given index
checks if this sequence is not empty
returns the number of elements in this sequence
splits this sequence into a pair of sequences at the given position
returns the element at the given index
replace the element at the given index with the supplied value
delete the element at the given index
takes the given number of elements from the head of this sequence if they are available
drops the given number of elements from the head of this sequence if they are available
returns an iterator for this list
returns <code>true</code> if this is a failure, <code>false</code> otherwise
returns <code>true</code> if this is a success, <code>false</code> otherwise
returns the failing value, or throws an error if there is no failing value
returns the success value, or throws an error if there is no success value
the catamorphism for validation
returns the success value or fails with the given error message
returns the success value or fails with the given error message
returns the success value or the given value
returns the success value or the given value
the success value or the application of the given function to the failing value
executes a side-effect on the success value if there is one
executes a side-effect on the success value if there is one
maps the given function across the success side of this validation
binds the given function across this validation's success value if it has one
if list contains a failure, returns a failure of the reduction of all the failures using the semigroup, otherwise returns the successful list
returns <code>none</code> if this is a failure or if the given predicate <code>p</code> does not hold for the success value, otherwise, returns a success in <code>some</code>
function application on the success value
returns <code>true</code> if this is a failure or returns the result of the application of the given function to the success value
returns <code>false</code> if this is a failure or returns the result of the application of the given function to the success value
returns a single element list if this is a success value, otherwise an empty list
returns the success value in <code>some</code> if there is one, otherwise <code>none</code>
returns a single element array if this is a success value, otherwise an empty list
returns a single element stream if this is a success value, otherwise an empty list
function application on the successful side of this validation, or accumulating the errors on the failing side using the given semigroup should one or more be encountered
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
accumulates errors on the failing side of this or any given validation if one or more are encountered, or applies the given function if all succeeded and returns that value on the successful side
returns an iterator for this validation
if the list contains a failure, returns a validation of the list of fails in the list, otherwise returns a successful validation with the list of successful values
returns the failing value or fails with the given error message
returns the failing value or the given value
the failing value or the application of the given function to the success value
executes a side-effect on the failing value if there is one
executes a side-effect on the failing value if there is one
maps the given function across the failing side of this validation
binds the given function across this validation's failing value if it has one
returns <code>none</code> if this is a success or if the given predicate <code>p</code> does not hold for the failing value, otherwise, returns a fail in <code>some</code>
function application on the failing value
returns <code>true</code> if this is a success or returns the result of the application of the given function to the failing value
returns <code>false</code> if this is a success or returns the result of the application of the given function to the failing value
returns a single element list if this is a failing value, otherwise an empty list
returns the failing value in <code>some</code> if there is one, otherwise <code>none</code>
returns a single element array if this is a failing value, otherwise an empty list
returns a single element stream if this is a failing value, otherwise an empty list
returns an iterator for this projection
puts this validation's failing value in a non-empty list if there is one
construct a validation using the given either value
returns a validation based on a boolean condition
parses the given string into a byte
parses the given string into a double
parses the given string into a float
parses the given string into a integer
parses the given string into a long
parses the given string into a short
partitions the list into the list of fails and the list of successes
returns an iterator for this optional value
id is the zero element of optics composition, for all optics o of type o(e
id is the zero element of optics composition, for all optics o of type o(e
pattern matching on the structure of this tree
pattern matching on the tree
measures a given element
sums the given measurements with the monoid
returns the identity measurement for the monoid
a measured instance for nodes
a measured instance for digits
constructs a singleton tree
constructs a deep tree
constructs a deep tree with the given annotation value
a digit of one element
a digit of two elements
a digit of three elements
a digit of four elements
a binary tree node
a trinary tree node
a binary tree node
a trinary tree node
pattern matching on the structure of this tree
wraps the given iterable
binds the given function to the values in the given iterables with a final join
performs a bind across each element of all iterables of an iterable, collecting the values in an iterable
joins an iterable of iterables into a single iterable
the catamorphism for iterables, implemented as a left fold
returns an iterator for this iterable
returns a java
projects this either as a left
projects this either as a right
creates a priority queue from a finger tree
maps the values in each node with function f
filters nodes based on the value inside each node
filters the nodes based on the annotation of each node
is the tree empty?
returns all the elements of the queue with the highest (same) priority
adds a node with priority k and value a
adds nodes using the list of products with priority k and value a
does the priority k exist already?
adds nodes using the iterable of products with priority k and value a
adds a node with priority k and value a
performs a reduction on this priority queue using the given arguments
removes the top n elements with the highest priority
does the top of the queue have lower priority than k?
returns a list of products with priority k and value a
input that has no values available
input that is exhausted
input that has a value available
a computation that takes an element from an input to yield a new computation
a computation that has finished
todo more documentation
an iteratee that counts and consumes the elements of the input
an iteratee that skips the first n elements of the input
an iteratee that consumes the head of the input
an iteratee that returns the first element of the input
an iteratee that consumes the input elements and returns them as a list in reverse order, so that the last line is the first element
returns an iterator for this stream
performs a reduction on this node using the given arguments
returns a stream of boolean where the head is the most significant bit (the bit with the largest value)
returns the bit set from indices in the range from low (inclusive) to high(exclusive) from the least significant bit (on the right), e
creates an empty trie
returns if the trie is empty
static constructor for a hamt instance
returns an optional value for the given key k for those nodes between lowindex (inclusive) and highindex (exclusive)
adds the product of key-value (k, v) pairs to the trie
sets the key-value pair (k, v) for the bit range lowindex (inclusive) to highindex (exclusive)
returns a stream of key-value pairs
returns the list of key-value pairs, ordered by key
returns a list of key-value pairs
performs a left-fold reduction across this trie
returns the number of elements in the trie
returns the potential successor of a value for this enumerator
returns the potential predecessor of a value for this enumerator
returns a function that moves a value along the enumerator a given number of times
moves a value along the enumerator a given number of times
invariant functor map over this enumerator
construct an enumerator
construct an enumerator
returns an iterator for this non-empty list
prepend the given value to this list
appends (snoc) the given element to this non empty list to produce a new non empty list
the length of this list
appends the given list to this list
appends the given list to this list
performs a right-fold reduction across this list
performs a right-fold reduction across this list
performs a left-fold reduction across this list
maps the given function across this list
binds the given function across each element of this list with a final join
returns a nonemptylist of the sublists of this list
returns a nonemptylist of the tails of this list
maps the given function across the tails of this list (comonad pattern)
intersperses the given argument between each element of this non empty list
reverse this non empty list in constant stack space
sorts this non empty list using the given order over elements using a <em>merge sort</em> algorithm
zips this non empty list with the given non empty list to produce a list of pairs
zips this non empty list with the index of its element as a pair
zips this non empty list with the given non empty list using the given function to produce a new list
zips this non empty list with the given non empty list using the given function to produce a new list
transforms a non empty list of pairs into a non empty list of first components and a non empty list of second components
returns a <code>list</code> projection of this list
projects an immutable collection of this non-empty list
return a non-empty list with the given head and tail
returns a potential non-empty list from the given list
concatenate (join) a non empty list of non empty lists
returns an iterator for this array
returns an either projection of this array; the given argument in <code>left</code> if empty, or the first element in <code>right</code>
returns a list projection of this array
maps the given function across this array
filters elements from this array by returning only elements which produce <code>true</code> when the given function is applied to them
performs a side-effect for each element of this array
performs a side-effect for each element of this array
performs a right-fold reduction across this array
performs a left-fold reduction across this array
performs a fold left accummulating and returns an array of the intermediate results
performs a left-fold accummulating using first array element as a starting value and returns an array of the intermediate results
performs a right-fold accummulating and returns an array of the intermediate results
performs a right-fold accummulating using last array element as a starting value and returns an array of the intermediate results
binds the given function across each element of this array with a final join
binds the given function across each element of this array and the given array with a final join
performs function application within an array (applicative functor pattern)
reverse this array in constant stack space
appends the given array to this array
returns an empty array
unsafe package-private constructor
constructs a singleton array
joins the given array of arrays using a bind operation
returns <code>true</code> if the predicate holds for all of the elements of this array, <code>false</code> otherwise (<code>true</code> for the empty array)
returns <code>true</code> if the predicate holds for at least one of the elements of this array, <code>false</code> otherwise (<code>false</code> for the empty array)
finds the first occurrence of an element that matches the given predicate or no value if no elements match
returns an array of integers from the given <code>from</code> value (inclusive) to the given <code>to</code> value (exclusive)
zips this array with the given array using the given function to produce a new array
projects an unmodifiable list view of this array
returns a java
returns a copy of the underlying primitive array
transforms an array of pairs into an array of first components and an array of second components
returns an iterator for this array
returns the element at the given index if it exists, fails otherwise
returns the length of this array
returns <code>true</code> is this array is empty, <code>false</code> otherwise
returns <code>false</code> is this array is empty, <code>true</code> otherwise
returns an option projection of this array; <code>none</code> if empty, or the first element in <code>some</code>
returns an either projection of this array; the given argument in <code>left</code> if empty, or the first element in <code>right</code>
returns a list projection of this array
returns a stream projection of this array
maps the given function across this array
filters elements from this array by returning only elements which produce <code>true</code> when the given function is applied to them
performs a side-effect for each element of this array
performs a right-fold reduction across this array
performs a left-fold reduction across this array
binds the given function across each element of this array with a final join
performs a bind across each array element, but ignores the element value each time
performs function application within an array (applicative functor pattern)
reverse this array in constant stack space
appends the given array to this array
projects an immutable collection of this array
returns an iterator for this hash set
construct a hash set with the given equality and hashing strategy
construct a hash set with the given equality and hashing strategy
construct a hash set with the given equality and hashing strategy
compare two values for equality using the underlying equality strategy
compute the hash of the given value using the underlying hashing strategy
creates a new hashset using the given equal and hash
create a hashset from the iterable
determines if this hash set contains the given element
insert the given element into this hash set
clear all elements from this hash set
determines if this hash set contains any elements
returns the number of entries in this hash set
deletes the given element from this hash set
returns a list projection of this hash set
projects an immutable collection of this hash set
returns an iterator of all the positions of this treezipper
creates a new tree zipper given a currently selected tree, a forest on the left, a forest on the right, and a stream of parent contexts
an equal instance for tree zippers
a show instance for tree zippers
navigates to the parent of the current location
navigates to the top-most parent of the current location
navigates to the left sibling of the current location
navigates to the right sibling of the current location
navigtes to the first child of the current location
navigtes to the last child of the current location
navigates to the given child of the current location, starting at index 0
navigates to the first child of the current location, that satisfies the given predicate
creates a new tree zipper focused on the root of the given tree
creates a new tree zipper focused on the first element of the given forest
indicates whether the current node is at the top of the tree
indicates whether the current node is the leftmost tree in the current forest
indicates whether the current node is the rightmost tree in the current forest
indicates whether the current node is at the bottom of the tree
modifies the current node with the given function
modifies the label at the current node with the given function
returns the label at the current node
inserts a tree to the left of the current position
inserts a tree to the right of the current position
inserts a tree as the first child of the current node
inserts a tree as the last child of the current node
inserts a tree at the specified location in the current node's stream of children
removes the current node from the tree
maps the given function across this zipper (covariant functor pattern)
returns a zipper over the tree of all possible permutations of this tree zipper (comonad pattern)
maps the given function over the tree of all positions for this zipper (comonad pattern)
returns the natural number equal to the given biginteger
returns the natural number equal to the given long
add two natural numbers together
subtract a natural number from another
multiply a natural number by another
divide a natural number by another
take the remainder of a natural number division
divide a natural number by another yielding both the quotient and the remainder
return the long value of this natural number
return the float value of this natural number
return the double value of this natural number
return the int value of this natural number
evaluate each action in the sequence from left to right, and collect the results
map each element of a structure to an action, evaluate these actions from left to right and collect the results
constructs a lazy string from a string
constructs a lazy string from a stream of characters
the length of the lazy string
returns the caracter at the specified index
gets the specified subsequence of this lazy string
returns the string representation of this lazy string
appends the given lazy string to the end of this lazy string
returns true if the given lazy string is a substring of this lazy string
returns true if the given lazy string is a suffix of this lazy string
returns true if the given lazy string is a prefix of this lazy string
returns the first character of this string
returns all but the first character of this string
checks if this string is empty
returns the reverse of this string
returns the first index of the given character in this lazy string, if present
returns the first index of the given substring in this lazy string, if present
regular expression pattern matching
splits this lazy string by characters matching the given predicate
joins the given stream of lazy strings into one, separated by newlines
joins the given stream of lazy strings into one, separated by spaces
zero is equal to itself
zero is not equal to anything other than zero
zero is not equal to anything other than zero
a number is equal to another if their predecessors are equal
the sum of zero and any other number is that number
the sum of zero and any other number is that number
the sum of numbers a and b is one greater than the sum of b and the predecessor of a
creates a vector-3 from a head and a tail
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
returns an iterator for the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
creates a vector-5 from a head and a tail
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
creates a vector-4 from a head and a tail
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
creates a vector-8 from a head and a tail
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
creates a vector-7 from a head and a tail
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
creates a vector-6 from a head and a tail
returns an iterator for the elements of this vector
returns a nonempty list with the elements of this vector
returns a stream of the elements of this vector
maps the given function across this vector
performs function application within a vector (applicative functor pattern)
zips this vector with the given vector using the given function to produce a new vector
the empty set
checks if the given element is a member of this set
inserts the given element into this set
returns an iterator over this set
maps the given function across this set
folds this set using the given monoid
folds this set from the right using the given monoid
returns a java
returns a java
returns a java
returns a stream representation of this set
returns a stream representation of this set in reverse order
add all the elements of the given set to this set
filters elements from this set by returning only elements which produce <code>true</code> when the given function is applied to them
remove all elements from this set that do not occur in the given set
remove all elements from this set that occur in the given set
splits this set at the given element
find element equal to the given one
find largest element smaller than the given one
find smallest element greater than the given one
find largest element smaller or equal to the given one
find smallest element greater or equal to the given one
returns true if this set is a subset of the given set
join a set of sets into a single set
return the elements of the given iterable as a set
returns <code>true</code> if the two given arguments are equal, <code>false</code> otherwise
returns <code>true</code> if the two given arguments are not equal, <code>false</code> otherwise
partially applied equality check
maps the given function across this equal as a contra-variant functor
constructs an equal instance from the given function
constructs an equal instance from the given definition
constructs an equal instance from the given (alternative) definition
an equal instance for a product-1
an equal instance for a product-2
an equal instance for a product-3
an equal instance for a product-4
an equal instance for a product-5
an equal instance for a product-6
an equal instance for a product-7
an equal instance for a product-8
an equal instance for a vector-2
an equal instance for a vector-3
an equal instance for a vector-4
an equal instance for a vector-5
an equal instance for a vector-6
an equal instance for a vector-7
an equal instance for a vector-8
an equal instance for heterogeneous lists
equal instance for sets
do not use it for any other purpose
do not use it for any other purpose
applies a given function over the arguments of another function of arity-2
joins two arguments of a function of arity-2 into one argument, yielding a function of arity-1
constructs a strategy from the given evaluation function
apply the strategy to the given product-1
waits for every future in a list to obtain a value, and collects those values in a list
evaluates a list of product-1s in parallel
maps the given function over the given list in parallel using this strategy
maps the given function over the given array in parallel using this strategy
binds the given function in parallel across the given list, using the given strategy, with a final join
binds the given function in parallel across the given array, using the given strategy, with a final join
sequentially evaluates chunks (sub-sequences) of a list in parallel
zips together two lists in parallel using a given function, with this strategy
zips together two arrays in parallel using a given function, with this strategy
constructor method for parmodule
takes a promise-valued function and applies it to each element in the given list, yielding a promise of a list of results
takes a promise-valued function and applies it to each element in the given stream, yielding a promise of a stream of results
maps a concurrent function over a product-1 inside a promise
maps across a nonempty list in parallel
maps across an array in parallel
maps a function across a zipper in parallel
maps a function across a tree in parallel
maps a function across a treezipper in parallel
zips two lists together with a given function, in parallel
zips two streams together with a given function, in parallel
zips two arrays together with a given function, in parallel
maps with the given function across the given stream in parallel, while folding with the given monoid
maps the given function across all positions of the given zipper in parallel
maps the given function across all subtrees of the given tree in parallel
maps the given function across all positions of the given treezipper in parallel
maps the given function across all sublists of the given nonemptylist in parallel
promises to provide the value of the given 1-product, in the future
promises to send a value to the given actor in the future
turns a promise of a promise into just a promise
binds the given function over this promise, with a final join
performs function application within a promise (applicative functor pattern)
binds the given function to this promise and the given promise, with a final join
performs a right-fold reduction across a list in constant stack space
performs a right-fold reduction across a stream in constant stack space
waits if necessary for the computation to complete, and then retrieves its result
waits if necessary for the computation to complete, and then retrieves its result
returns true if this promise has been fulfilled
applies a stream of comonadic functions to this promise, returning a stream of values
an actor equipped with a queue and which is guaranteed to process one message at a time
creates a new actor that uses the given parallelization strategy and has the given side-effect
creates a new actor that uses the given parallelization strategy and has the given side-effect
pass a message to this actor, applying its side-effect to the message
binds the given function to the value in a callable with a final join
turns a list of callables into a single callable of a list
turns a given either value into the equivalent callable
turns an optional value into a callable
normalises the given callable by calling it and wrapping the result in a new callable
a simple connector (the default) that gets connections to the given database url from the driver manager
creates a database state reader given a connection url
creates a database state writer given a connection url
returns a new reader that reads the database via the given connector
returns a new writer that writes the database via the given connector
runs the given database action as a single transaction
constructs a pure computation that results in the given value
suspends the given computation in a thunk
returns a queue with unique integer priorities
applies the given size and random generator to produce a value
maps the given function across this generator
executes a side-effect for each generated result using the given arguments
executes a side-effect for each generated result using the given arguments
binds the given function across this generator to produce a new generator
binds the given function across this generator and the given generator to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
binds the given function across this generator and the given generators to produce a new generator
function application within this generator to produce a new generator
resizes this generator with the given size
returns a generator that uses the given function
constructs a generator that can access its construction arguments &mdash; size and random generator
returns a generator that always produces the given value
returns a generator that never returns a value
construct a property argument with the given value and number of shrinks
produces a generator that is independent of the given generator using the given value
returns the result of applying the given size and random generator
performs a conjunction of this property with the given property
performs a disjunction of this property with the given property
performs a sequence of this property with the given property
checks this property using the given arguments and produces a result
returns a property that produces a result only if the given condition satisfies
returns a property from the given function
returns a property that always has the given result
returns the results and names of checking the properties on the given classes
returns the results and names of checking the properties on the given classes
returns the results and names of checking the properties on the given class
check the given class and categories
returns a result that the property has passed
returns a result that the property has been proven
returns a result that the property has been falsified
returns a result that the property been exhausted in checking
returns a result that checking the property threw an exception
returns a result that generating values to check the property threw an exception
a rendering of a check result that summarises in one line
a rendering of a check result that summarises in one line but throws an exception in the result is a failure (falsified, property exception or generator exception)
an arbitrary for functions
an arbitrary for the lcgrng
an arbitrary for functions
an arbitrary for function-2
an arbitrary for function-3
an arbitrary for function-4
an arbitrary for function-5
an arbitrary for function-6
an arbitrary for function-7
an arbitrary for function-8
returns an arbitrary implementation for the disjoint union
returns an arbitrary validation for the given arbitrary parameters
returns an arbitrary implementation for throwables
returns an arbitrary implementation for a java enumeration
if this result is proven, alter it to be unfalsified with the same arguments; otherwise, return <code>this</code>
adds an argument to this result
returns a result from the given potential result
returns a result representing no result
returns an unfalsified result
returns a falsified result
returns a proven result
returns an exception result
randomly chooses a value between the given range (inclusive)
randomly chooses a value between the given range (inclusive)
randomly chooses a value between the given range (inclusive)
randomly chooses a value between the given range (inclusive)
returns a shrink of the given argument
constructs a shrink strategy from the given function that produces a tree of values given a value
set to true if you want all rows to be of the same height
the max height a row could be
find first visible position, scrap all children, and then layout all visible views returning the number of pixels laid out, which could be greater than the entire view (useful for scroll functions)
