created jack wang override create nullable bundle saved instance state set content view layout activity indicator string get intent extra avi loading find id
set indicator color 0x parse get resources android black param
use add animator update listener create otherwise doesn work animation restart param value listeners put
call submit tag view input get available end change listener append group text string
returns state tag group view exists string get input text
returns tag array group except string get tags count child list view state add text size
append tag group exception previous param text input string view get illegal state already context set click listener internal add
append tag group param sequence view get context set click listener internal add
reads lines standard input line length less two three read sequence stream string repeat stdin io functions list run safe take println size
equals generated intellij override object get vending machine coins items locked
pay attention pass parameter two way example name like simple indicator would use com wang avi indicators full android param must extend set string text utils empty builder drawable contains get append instance found exception log didn find check instantiation print stack trace illegal access
link com squareup javapoet name canonical string list names array add simple get empty join sub size
test demonstrates known problem creating streams mutable structures ways created way fail weak stream references getting garbage collected underlying data structure changes iterator gets updated used create different expected concurrent modification exception iterable update java util list integer head remove tail
lifts function fully featured wrapper lift func
returns display rendering given argument param stream character show
returns display rendering given argument param list character showl show
prints given argument standard output stream line param print unit value println system
prints given argument standard output stream param print unit value buffer character cs show empty tail head system array copy range
prints given argument standard error stream line param print println system err show
returns show instance using given function param use returned stream character
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
show instance vector param ea elements stream contramap
lifts function fully featured wrapper lift func
compute hash given value param
construct hash given function param uses integer
hash instance product param ha first element contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
hash instance vector param ea elements stream contramap
convert using soft call need semantic function evaluated first link subsequent reference garbage collected due shortage memory ie avoid errors memo
maps given functions across monoid invariant functor param covariant map contra variant xmap definition def zero empty override append prepend dimap multiply sum stream
sums two given arguments param value sum another def append
returns function sums given value according monoid param sum def prepend
zero value monoid def empty
returns value summed code times definition uses peasant multiplication exploiting associativity require log link sum object param multiplier reapeatly zero multiply def
sums given values right fold param sum list def append empty
sums given values right fold param sum stream def append empty
sums given values left fold param sum list def append empty
sums given values left fold param sum stream def
intersperses given value two elements iterable sums result param values sum intersperse interspersed join stream prepend def empty fold left append
swaps arguments summing monoid dual def
constructs monoid given definition must follow monoidal laws param def instance uses sun function zero value
constructs monoid given definition must follow monoidal laws param def instance uses sun function zero value alt
constructs monoid given semigroup definition zero value must follow monoidal laws param instance uses sun function def override empty sum stream multiply 1p append prepend
constructs monoid given sum function zero value must follow monoidal laws java users use link def semigroup definition object instead param instance uses sun alt override prepend empty
constructs monoid given sum function zero value must follow monoidal laws java users use link def semigroup definition object instead param instance uses sun override empty append
constructs monoid given semigroup zero value must follow monoidal laws deprecated since use link def definition object instead param instance uses sun function
monoid functions param mb function codomain definition def override empty append
monoid lists list def definition override empty nil append sum stream map fold left run
monoid options take first available value option def definition override empty none append prepend identity multiply sum stream filter head
monoid options take last available value option def definition override empty none append prepend identity multiply
monoid streams stream def definition override empty nil append sum join
monoid arrays suppress warnings unchecked array def definition override empty append
monoid values io ma definition def override empty append run
monoid sets param order set elements whose given ord def definition override empty append union
monoid maximum elements ordering deprecated since use link ord max object param zero minimum element
sums list doubles param sum doubless fold left
returns product list doubles param multiply together fold left
returns first non code value given list optional values none found param potentially search def nullablefind find map option
returns first value found list visitors application given otherwise param apply def none yield thegiven visitor option find map function
returns first non code value found list visitors application given otherwise param apply looking def none yield thegiven nullable visitor map compose option
parses input produce result error param parse remaining validation
binds given function across parsers join param apply element pb parser bind performing map
binds given function across parsers join param apply element pb parser bind pc performing map
binds given function across parsers join param apply element pb parser bind pc pd performing map
binds given function across parsers join param apply element pb parser bind pc pd pe performing map
binds given function across parsers join param apply element pb parser bind pc pd pe pf performing map
binds given function across parsers join param apply element pb parser bind pc pd pe pf pg performing map
binds given function across parsers join param apply element pb parser bind pc pd pe pf pg ph performing map
performs function application within parser param returning value apply bind map
returns parser repeats application zero many times stream repeat value nil
returns parser computes using given function param construct validation result
returns parser produces element stream satisfies given predicate fails param missing error available sat satisfy bind value fail
returns parser produces character one available fails given error param fail unavailable stream element
returns parser produces given character fails otherwise param missing error available sat produced one produce stream satisfy
returns parser produces given number characters fails error param missing unavailable produce parse result stream character value nil bind cons
returns parser produces given stream characters fails otherwise param missing error producing could supply sat character produced cs produce empty value nil head bind tail cons
returns parser produces digit param missing error character stream produce sat produced satisfy map
returns parser produces lower character param missing error stream produce sat produced see satisfy
returns parser produces upper character param missing error stream produce sat produced see satisfy
returns parser produces defined character param missing error stream produce sat produced see satisfy
returns parser produces high surrogate character param missing error stream produce sat produced see satisfy
returns parser produces identifier ignorable character param missing error stream produce sat produced see satisfy
returns parser produces control character param missing error stream produce sat produced see iso satisfy
returns parser produces java identifier part character param missing error stream produce sat produced see satisfy
returns parser produces java identifier start character param missing error stream produce sat produced see satisfy
returns parser produces alpha character param missing error stream produce sat produced see letter satisfy
returns parser produces alpha numeric character param missing error stream produce sat produced see letter digit num satisfy
returns parser produces low surrogate character param missing error stream produce sat produced see satisfy
returns parser produces mirrored character param missing error stream produce sat produced see satisfy
returns parser produces space character param missing error stream produce sat produced see satisfy
returns parser produces title character param missing error stream produce sat produced see satisfy
returns parser produces unicode identifier part character param missing error stream produce sat produced see identifer satisfy
returns parser produces unicode identifier start character param missing error stream produce sat produced see identifer satisfy
returns parser produces white space character param missing error stream produce sat produced see whitespace satisfy
maps given function across remainder parse input param map result different rest
maps given function across parse value param map result different
returns iterator parse value method exists permit use code loop next element exception remove unsupported operation
construct result given remainder parse input value param
returns error represent undefinedness computation early failure using given message param fail givenmessage string
maps function synchronous queue param map applied element bs add iterable stream collection
maps function priority blocking queue param map applied element iterable stream collection
maps function linked blocking queue param map applied element iterable stream collection
maps function copy write array set param map applied element iterable stream collection
maps function copy write array list param map applied element iterable stream collection
maps function concurrent linked queue param map applied element iterable stream collection
maps function array blocking queue param map applied element bs size add iterable stream collection
maps function tree set param map applied element iterable stream collection
maps function priority queue param map applied element iterable stream collection
maps function linked list param map applied element iterable stream collection
maps function array list param map applied element iterable stream collection
promotes function trees promoted transform tree bs self node root lazy stream sub forest
promotes function zip two trees applying lock step structure resulting tree structural intersection zips ta tb self node root lazy stream sub forest
sums two given arguments param value sum another def append
returns function sums given value according semigroup param sum def prepend
returns value summed code times definition uses peasant multiplication exploiting associativity require log link sum object param multiplier reapeatly zero multiply 1p def
sums given values left fold sum nel non empty list def append
sums given values left fold shortcutting computation early possible sum stream def
swaps arguments summing semigroup dual def
lifts semigroup obtain trivial monoid option lift definition def override empty none append multiply oa map 1p sum stream oas bind uncons tail
maps given functions across monoid invariant functor param covariant map contra variant semigroup xmap definition def override append prepend dimap multiply 1p sum stream bs
constructs semigroup given definition param def construct
constructs semigroup given definition param def construct alt
constructs semigroup given function java users use link def definition instead param sum construct
semigroup always uses first left hand side value def definition override append prepend constant multiply 1p sum stream
semigroup always uses last right hand side value def definition override append prepend identity multiply 1p
semigroup non empty lists list def definition override append sum nea stream neas tail map nel fold left nil run
lazy semigroup unary products param sa product type definition def override append multiply 1p ap sum stream map
returns ordering given arguments param instance compare another def
returns code given arguments equal otherwise param instance compare equality another def ordering
maps given function across ord contra variant functor param map contramap definition self def override ordering compare compose
returns code first given argument less second otherwise param instance compare ordering another def
returns code first given argument less equal second otherwise param instance compare ordering another def
returns code first given argument greater second otherwise param instance compare ordering another givenargument def
returns function argument less method param value compare compose ordering def
returns function argument greater method param value compare compose ordering def
returns greater two arguments param value compare another values max def append
returns order instance uses given equality test ordering function java users use link ord def definition instead param
returns order instance uses given minimal equality test ordering definition param def ord
returns order instance uses given minimal equality test ordering definition param def ord alt
order instance product param oa across produced type ord contramap
order instance product first factor considered significant param oa ob second ord def compare
order instance product first factor considered significant param oa ob second oc third ord def compare
order instance code comparable ord def ordering compare
order instance uses link object hash code computing equality thus objects returning considered equals safe therefore method deprecated based release ord def ordering integer value compare
order instance uses link object hash code equals computingthe equality first compared equal objects using ordering violate antisymmetry collisions based deprecated release ord def
returns iterator tree method exists permit use code loop flatten
creates tree given root potentially infinite subforest param element forest stream subtrees newly sprouted node
creates tree given root potentially infinite subforest param element forest stream subtrees newly sprouted node
creates ary given root subforest length param element tree forest list subtrees newly sprouted node stream
puts elements tree stream pre order flatten squish xs cons root sub forest map fold right functions curry nil
provides stream elements tree level order levels flat sub forests bind compose forest roots map root iterate empty single
maps given function tree param map applied element fmap node root sub forest stream
folds tree using given monoid param transformation elements fold result folding map sum root right sub forest list
projects immutable collection tree flatten
folds tree applying function bottom top param fold transforming current node stream already transformed nodes children folded recursive call tbs sub forest map root get
constructs empty tree map param key ord order keys given set
constructs tree map given elements param key ord order keys construct iterable tm empty set
returns potential value given key maps param look tree map option get lookup none bind
inserts given key value association tree map already mapped old replaced one param insert set option
deletes entry tree map corresponds given key param delete corresponding removed option none
returns number entries tree map size
determines tree map entries code otherwise empty
returns values tree map list iterable join compose wrap
returns keys tree map list
determines given key value exists tree map param look code contains otherwise member option none
returns iterator map key value pairs method exists permit use code loop join tree stream iterable wrap tuple compose
mutable map projection tree isomorphic option fake pair none comparator ord contramap java util put
immutable projection given mutable map param ord order keys project one tree isomorphic empty entry set get key value
modifies value given key present applying function param modify tree map transformed paired modified otherwise update set option none compose tuple
modifies value given key present applying function inserts param modify associate already tree map transformed update set
splits tree map given key returns triple ul li set containing values associated keys less option value mapped exists otherwise none greater param split two sets optional elements first givenkey second present ord get functions join
internal construction tree map given set param ord order keys elements construct option empty list fold left tm opt
splits tree map given key returns triple ul li containing values associated keys less option value mapped exists otherwise none greater param split two maps optional first mappedto second present lookup set get ord contramap
maps given function across values tree map param apply transformed suppress warnings unchecked option compose functions coord flip none ord contramap
returns minimum key value pair tree empty option min map
returns minimum key tree empty option min map
returns maximum key value pair tree empty option max map
returns maximum key tree empty option max map
expression code union takes left biased prefers duplicate keys encountered param tree wish combine one combined map result set
expression code union takes left biased prefers duplicate keys encountered param list set pairs wish combine one combined tree map iterable result contains
creates list function alternatives functions create see iterable iterator array dlist trampoline
concatenates internal lists together held list lambda state produce converts appending operation left associative right giving speed run append fn nil
converts list standard java util run
empty list param nil trampoline pure
produces list one element param single tail trampoline pure cons
prepends single element list produce param append cons
appends single element end list produce param append snoc
appends two lists together produce list param append end one kleisli tramp compose fn
returns iterator map keys method exists permit use code loop
construct hash map given equality hashing strategy param equal java util
construct hash map given equality hashing strategy param initial capacity equal java util
construct hash map given equality hashing strategy param initial capacity load factor equal java util
construct hash map equal
compare two key values equality using underlying strategy param one value code equal otherwise
compute hash given key value using underlying hashing strategy param computer
returns potential value given key maps param look hash map option get
clear entries hash map
determines given key value exists hash map param look code contains otherwise
returns key entries hash map list keys buffer set snoc
returns values hash map list iterable
determines hash map entries code otherwise empty
returns number entries hash map size
inserts given key value association hash map param insert set put
deletes entry hash map corresponds given key param delete remove
deletes entry hash map corresponds given key returns associated value param delete one option get remove
projects immutable collection hash map list
converts iterable hash map equal entries entry set
creates zipper given streams focus focused item param left stream elements element right
creates zipper given triple param elements focus element respectively created stream
ord instance zippers param element type zipper stream contramap
equal instance zippers param element type zipper stream se contramap
show instance zippers param element type zipper stream ss contramap
maps given function across elements zipper covariant functor pattern param map applied left focus right
performs right fold reduction across zipper param function apply element beginning value start application result left flip cons focus compose
possibly create zipper provided stream least one element otherwise none head focus rest follow right side param suppress warnings may conditional option empty nil tail
possibly create zipper provided stream least one element otherwise none last focus following rest order left param option end empty xs reverse tail head nil
possibly moves focus next element list optional zipper moved one right elements offocus otherwise none option empty
attempts move focus next element error elements zipper moved one right offocus otherwise empty tried end left cons head tail
possibly moves focus previous element list optional zipper moved one left elements offocus otherwise none option empty
attempts move focus previous element error elements zipper moved one left offocus otherwise empty tried beginning tail head right cons
inserts element left focus moves param insert zipper given current right cons
inserts element right focus moves param insert zipper given current left cons
possibly deletes element focus moves left right returns none zipper removed deleting elementwould cause empty option delete tail head
possibly deletes element focus moves right left returns none zipper removed deleting elementwould cause empty option delete tail head
returns whether focus first element otherwise start left empty
returns whether focus last element otherwise end right empty
maps variations zipper given function applied variation comonad pattern param comonadic apply cobind positions map
zips elements zipper indicates whether element focus booleans except focused pairs paired thatelement otherwise zip left repeat right
move focus specified index param zipper moved none option ll left length rl right bind previous next
moves focus element matching given predicate present param match zipper nearest focused option find ps positions lefts interleave rights
returns index focus left length
move focus next element last focused loop first zipper unless currently casethe becomes cycle left empty right stream xs reverse nil head tail snoc
move focus previous element first focused loop last zipper unless currently becomes cycle left empty right stream xs reverse tail snoc head nil
possibly deletes element focus move left last deletion cause list empty none zipper focused removed previous lastelement option delete cycle right tail head stream xs reverse nil
possibly deletes element focus move right first deletion cause list empty none zipper focused removed next firstelement option delete cycle left head tail stream xs reverse nil
returns stream representation zipper contains elements left reverse snoc focus append right
returns iterator positions zipper starting leftmost position stream
singleton sequence param single element given seq mk tree
constructs sequence iterable param create elements seq empty snoc
inserts given element front sequence param insert seq cons ftree
inserts given element end sequence param insert seq snoc ftree
first element sequence operation nonempty otherwise error head ftree
last element sequence operation nonempty otherwise error ftree
sequence without first element operation nonempty otherwise error seq tail length empty ftree
sequence without last element operation nonempty otherwise error seq init length empty ftree
converts sequence stream ftree fold left cons nil reverse
converts sequence list buffer buf empty snoc
converts sequence java util list override get index iterator seq size length
returns iterator seq method exists permit use code loop finger tree integer ftree next empty element exception head tail remove unsupported operation
appends given sequence param append one appended seq ftree
checks empty sequence otherwise ftree
inserts element given index log operation param sequence inserted error bounds seq insert split append single
checks sequence empty otherwise ftree
returns number elements sequence length ftree measure
splits sequence pair sequences given position log operation subsequence containing elements indices less code greater equal seq split finger tree integer lr ftree index
returns element given index log operation param error bounds check ftree lookup function identity
replace element given index supplied value log operation param update updated sequence error bounds seq check finger tree integer lxr ftree split append cons
delete element given index log operation param update updated sequence error bounds seq check finger tree integer lxr ftree split append
takes given number elements head sequence available param maximum take consisting first whole less seq split
drops given number elements head sequence available param drop consisting except first ones empty less seq split
returns iterator list method exists permit use code loop collection
returns code failure otherwise fail left
returns code success otherwise right
returns failing value error fail left validation success
returns success value error right validation fail
catamorphism validation folds breaking left right param fail function call failed success succeeded reduced value either
returns success value fails given error message param err fail string right
returns success value fails given error message param err fail string right
returns success value given param failure right
returns success value given param failure right
success value application given function failing param execute right
executes side effect success value one param execute unit foreach right
executes side effect success value one param execute foreach right
maps given function across success side validation param map mapped suppress warnings unchecked fail
binds given function across validation success value one param bind binding suppress warnings unchecked fail
list contains failure returns reduction failures using semigroup otherwise successful validation sequence exists fail filter map fold left sum success acc cons nil reverse
returns code none failure given predicate hold success value otherwise param function test thesuccess option validation filter right map
function application success value param validation apply result bind map
returns code failure result application given function success value param predicate test givenfunction forall right
returns code failure result application given function success value param predicate test givenfunction exists right
returns single element list success value otherwise empty right
returns success value code one otherwise none option right
returns single element array success value otherwise empty list right
returns single element stream success value otherwise empty list right
function application successful side validation accumulating errors failing using given semigroup one encountered param accumulate validating apply failed accumulated asucceeding succeeded suppress warnings unchecked accumapply fail sum success
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed apply succeeding accumulated ifone accumapply map
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed apply succeeding accumulated ifone accumapply map curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third apply succeeding accumulated ifone accumapply curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth apply succeeding accumulated ifone accumapply curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth apply succeeding accumulated ifone accumapply curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth apply succeeding accumulated ifone accumapply curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth vf seventh apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth vf seventh apply succeeding accumulated ifone accumapply curry
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth vf seventh vg eighth apply succeeding accumulated ifone accumapply
accumulates errors failing side given validation one encountered applies function succeeded returns value successful param semigroup accumulate validations fail va second failed vb third vc fourth vd fifth ve sixth vf seventh vg eighth apply succeeding accumulated ifone accumapply curry
returns iterator validation method exists permit use code loop either right
list contains failure returns validation fails otherwise successful values accumulate failures single using semigroup sequence non cumulative exists fail acc cons filter fold left nil reverse success
returns failing value fails given error message param err fail string either left
returns failing value given param success fail either left
failing value application given function success param execute either left
executes side effect failing value one param execute unit foreach either left
executes side effect failing value one param execute foreach either left
maps given function across failing side validation param map mapped either left
binds given function across validation failing value one param bind binding fail success
returns code none success given predicate hold failing value otherwise fail param function test thefailing option validation filter either left map
function application failing value param validation apply result bind map
returns code success result application given function failing value param predicate test givenfunction forall either left
returns code success result application given function failing value param predicate test givenfunction exists either left
returns single element list failing value otherwise empty either left
returns failing value code one otherwise none option either left
returns single element array failing value otherwise empty list either left
returns single element stream failing value otherwise empty list either left
returns iterator projection method exists permit use code loop either left
puts validation failing value non empty list one suppress warnings unchecked nel success fail
construct validation using given either value param
returns validation based condition code succeeds otherwise fails param base returned failing value use succeeding success fail
parses given string param parse successfully failing exception validation number format success fail
parses given string param parse successfully failing exception validation number format success fail
parses given string param parse successfully failing exception validation number format success fail
parses given string integer param parse successfully failing exception validation number format success fail
parses given string param parse successfully failing exception validation number format success fail
parses given string param parse successfully failing exception validation number format success fail
partitions list fails successes partition validation filter fail map success
returns iterator optional value method exists permit use code loop collection
create link iso type id zero element optics composition lens prism pre compose replace override get reverse self
create link iso type id zero element optics composition lens prism pre compose replace
pattern matching structure tree matches singleton override match empty single deep
pattern matching tree matches function deep override match empty single
measures given element param measure measurement
sums given measurements monoid param measurement add another sum two
returns identity measurement monoid zero
measured instance nodes node measure
measured instance digits digit measure
constructs singleton tree param single element given value finger
constructs deep tree structure consists two digits elements left right rest middle param prefix leftmost subtree finger nodes suffix rightmost given digit node sum measure
constructs deep tree given annotation value param annotate prefix leftmost elements middle subtree finger nodes suffix rightmost annotated digit node
digit one element param given
digit two elements param first element second given
digit three elements param first element second third given
digit four elements param first element second third fifth given
binary tree node param left child right
trinary tree node param left child middle right
binary tree node param vector elements
trinary tree node param vector elements
pattern matching structure tree matches empty override match single deep
wraps given iterable param wrap equipped useful functions
binds given function values iterables join param iterable bind apply performing map wrap
performs bind across element iterables iterable collecting values implementation strict stack space param transform containing results operations given sequence stream ts empty wrap option none head tail map cons
joins iterable iterables single param join joined id identity wrap bind
catamorphism iterables implemented left fold param function wrapped iterable base value destination type applied first leftmost result
returns iterator iterable
returns java util list implementation iterable returned cannot modified immutable standard size stream length empty suppress warnings unchecked contains object exists equal iterator array suspicious call collection add remove index retain clear unsupported operation exception modifying get set element equals last zipper bind move sub wrap drop take option pz next end focus previous start
projects either left projection
projects either right projection
creates priority queue finger tree equal ft
maps values node function priority queue map equal ftree finger tree measured monoid
filters nodes based value inside node priority queue filter values equal ftree
filters nodes based annotation node priority queue filter keys equal ftree
tree empty ftree
returns elements queue highest priority list top stream uncons nil tail cons take compose equal
adds node priority value operation take queue enqueue equal ftree snoc
adds nodes using list products priority value operation takes length queue enqueue fold left pq
priority exist already contains ftree split equal empty
adds nodes using iterable products priority value queue enqueue result
adds node priority value operation take queue enqueue
performs reduction priority queue using given arguments param empty value top dequeue function apply element tail without unqueue ftree measure finger tree split equal uncons head append
removes top elements highest priority queue dequeue result
top queue lower priority less ord ok option
returns list products priority value stream
input values available empty override apply el eof
input exhausted eof override apply empty el
input value available el element override apply empty eof
computation takes element input yield iter cont override fold done
computation finished iter done input override fold cont
documentation iter bind input done xe cont fold
iteratee counts consumes elements input iter integer length step override acc empty cont el constant eof done apply
iteratee skips first elements input iter unit drop step empty cont el constant eof done override apply
iteratee consumes head input iter option step empty cont el done eof none override apply
iteratee returns first element input iter option peek step empty cont el done eof none override apply
iteratee consumes input elements returns list reverse order last line first element allows build iteratees iter step override acc empty cont el cons eof done apply nil
returns iterator stream method exists permit use code loop collection
performs reduction node using given arguments match hash array mapped trie either
returns stream head significant bit largest value string binary map set drop
returns bit set indices range low inclusive high exclusive least significant right index max math min value
creates empty trie hash array mapped equal bit set seq
returns trie empty bit set
constructor instance hash array mapped trie hamt bit set bs seq node equal
returns optional value given key nodes low index inclusive high exclusive option find bit set bs hash range bits right none node old seq match equal hamt
adds product key value pairs trie hash array mapped set list fold left
sets key value pair bit range low index inclusive high exclusive hash array mapped trie set bs bits right node sn hamt seq insert equal old match empty update
returns stream key value pairs seq bind node
returns list key value pairs ordered ord stream sort
returns list key value pairs stream
performs left fold reduction across trie node seq
returns number elements trie length seq fold left acc node match hamt
returns potential successor value enumerator param option
returns potential predecessor value enumerator param option
returns function moves value along enumerator given number times param begin moving option plus
moves value along enumerator given number times param begin moving move potential moved option plus
invariant functor map enumerator param covariant contra variant given functions applied xmap option compose successor predecessor max min order contramap function plus
construct enumerator param successor function predecessor max potential maximum value min minimum order ordering type plus move enumeration given number times may supplied performanceenhancement certain types values option ord
construct enumerator code plus function derived successor predecessor param max potential maximum value min minimum order ordering type given values option ord curry aa none
returns iterator non empty list method exists permit use code loop collection
prepend given value list param non empty extra element cons nel tail head
appends snoc given element non empty list produce param append appended nel head tail
length list tail
appends given list param append appended non empty nel head tail
appends given list param append appended non empty buffer tail snoc head bb nel
performs right fold reduction across list function uses length stack space reverse left flip
performs right fold reduction across list function uses length stack space reverse left flip
performs left fold reduction across list function runs constant space head xs tail empty
maps given function across list param map applied element non empty nel head tail
binds given function across element list join param apply performing map non empty bind buffer head snoc append tail foreach effect bb nel
returns non empty list sublists somes stream substreams map functions conversions
returns non empty list tails considered tail purpose function comonad pattern somes map
maps given function across tails list comonad pattern param map results applying non empty
intersperses given argument element non empty list param separator intersperse interspersed nel head tail
reverse non empty list constant stack space elements order nel head tail
sorts non empty list using given order elements em merge sort algorithm param sorted according ord nel head tail
zips non empty list given produce pairs different lengths longer normalised function never fails param bs zip length shortest nel head tail
zips non empty list index element pair length integer zip nel head tail
zips non empty list given using function produce different lengths longer normalised never fails param bs zip length shortest nel head tail
zips non empty list given using function produce different lengths longer normalised never fails param bs zip length shortest nel head tail
transforms non empty list pairs first components second param xs transform unzip nel head tail
returns code list projection tail cons head
projects immutable collection non empty list
non empty list given head tail param first element remaining elements nel
returns potential non empty list given value returned param construct option none nel head tail
concatenate join non empty list lists param concatenation given bind identity
returns iterator array method exists permit use code loop collection
returns either projection array given argument code left empty first element right param value suppress warnings unchecked length
returns list projection array suppress warnings unchecked nil length cons
maps given function across array param map applied element suppress warnings unchecked object bs length
filters elements array returning produce code given function applied param predicate filter whose match suppress warnings unchecked list nil length cons
performs side effect element array param perform given unit value suppress warnings unchecked foreach object
performs side effect element array param perform given suppress warnings unchecked foreach object
performs right fold reduction across array function runs constant stack space param apply element beginning value start application result suppress warnings unchecked length
performs left fold reduction across array function runs constant space param apply element beginning value start application result suppress warnings unchecked object aa
performs fold left accummulating returns array intermediate results function runs constant stack space param apply argument pair initial value previous result next element beginning start application containing reduction suppress warnings unchecked scan object bs length
performs left fold accummulating using first array element starting value returns intermediate results fail empty arrays function runs constant stack space param apply argument pair next previous result containing reduction suppress warnings unchecked scan object bs length get
performs right fold accummulating returns array intermediate results function runs constant stack space param apply argument pair previous element initial value result beginning start application containing reduction suppress warnings unchecked scan object bs length
performs right fold accummulating using last array element starting value returns intermediate results fail empty arrays function runs constant stack space param apply argument pair previous result containing reduction suppress warnings unchecked scan object bs length get
binds given function across element array join param apply performing map suppress warnings unchecked bind list nil len length bs cons object foreach unit arraycopy
binds given function across element array join param sb bind apply performing map
performs function application within array applicative functor pattern param lf functions apply applying given bind map
reverse array constant stack space one object length
appends given array param aas append one appended object length arraycopy
returns empty array object
unsafe constructor elements given array must assignable type param wrapped mk object
constructs singleton array param element put given single object
joins given array arrays using bind operation param join id identity
returns code predicate holds elements array otherwise empty param function test element suppress warnings unchecked forall object
returns code predicate holds least one elements array otherwise empty param function test thisarray suppress warnings unchecked exists object
finds first occurrence element matches given predicate value elements match param function test array noelements suppress warnings unchecked option find object none
returns array integers given code value inclusive exclusive param minimum maximum integer range empty set
zips array given using function produce different lengths longer normalised never fails param bs zip length shortest len min object set get
projects unmodifiable list view array suppress warnings unchecked java util collections arrays
returns java util array list projection
returns copy underlying primitive array equivalent safe varargs
transforms array pairs first components second param xs transform suppress warnings unchecked unzip len length aa object ab get set
returns iterator array method exists permit use code loop
returns element given index exists fails otherwise param get
returns length array
returns code array empty otherwise
returns code array empty otherwise
returns option projection array code none empty first element
returns either projection array given argument code left empty first element right param value
returns list projection array
returns stream projection array
maps given function across array param map applied element
filters elements array returning produce code given function applied param predicate filter whose match
performs side effect element array param perform given unit value foreach
performs right fold reduction across array function uses length stack space param apply element beginning value start application result
performs left fold reduction across array function runs constant space param apply element beginning value start application result
binds given function across element array join param apply performing map bind
performs bind across array element ignores value time param bs apply join sequence
performs function application within array applicative functor pattern param lf functions apply applying given
reverse array constant stack space one
appends given array param aas append one appended
projects immutable collection array
returns iterator hash set method exists permit use code loop collection
construct hash set given equality hashing strategy param equal map
construct hash set given equality hashing strategy param initial capacity equal map
construct hash set given equality hashing strategy param initial capacity load factor equal map
compare two values equality using underlying strategy param one value code equal otherwise
compute hash given value using underlying hashing strategy param computer
creates hash set using given equal empty
create hash set iterable equal hs empty
determines hash set contains given element param look code otherwise
insert given element hash set param unit
clear elements hash set
determines hash set contains elements code otherwise empty
returns number entries hash set size
deletes given element hash set param delete code contained prior deletion otherwise get
returns list projection hash set keys
projects immutable collection hash set list
returns iterator positions tree zipper exists use foreach syntax
creates tree zipper given currently selected forest left right stream parent contexts param lefts siblings closest first rights parents forests
equal instance tree zippers param elements zipper stream contramap
show instance tree zippers param elements zipper stream contramap
navigates parent current location tree zipper focused node none root option parents empty stream head comb children lefts rights tail
navigates top parent current location tree zipper focused node root option
navigates left sibling current location tree zipper focused node none siblings option lefts empty head tail rights cons parents
navigates right sibling current location tree zipper focused node none siblings option rights empty head lefts cons tail parents
navigtes first child current location tree zipper focused node none children option stream ts sub forest empty head nil tail parents
navigtes last child current location tree zipper focused node none children option stream ts sub forest reverse empty head tail nil parents
navigates given child current location starting index param navigate optional tree zipper focused node none option get stream lr split children nil sub forest head tail parents
navigates first child current location satisfies given predicate param satisfied node optional tree zipper focused none option find stream split acc xs empty head tail cons subforest sub forest ltr nil parents
creates tree zipper focused root given param create stream nil lp 3nil
creates tree zipper focused first element given forest param ts create option stream empty head nil tail lp 3nil none
indicates whether current node top tree root otherwise parents empty
indicates whether current node leftmost tree forest left siblings otherwise first lefts empty
indicates whether current node rightmost tree forest siblings right otherwise last rights empty
indicates whether current node bottom tree child nodes otherwise leaf sub forest empty
modifies current node given function param modify tree zipper focused transformed set
modifies label current node given function param transform tree zipper focused transformed modify set get
returns label current node get tree root
inserts tree left current position inserted becomes param insert zipper given focus right lefts rights cons parents
inserts tree right current position inserted becomes param insert zipper given focus left lefts cons rights parents
inserts tree first child current node inserted becomes param insert zipper given focus stream nil sub forest parents
inserts tree last child current node inserted becomes param insert zipper given focus sub forest reverse stream nil parents
inserts tree specified location current node stream children inserted becomes param index insert given starting zipper focus streamof none fewer code option lr split nil sub forest parents
removes current node tree position becomes right sibling left siblings parent zipper removed option delete none rights empty head lefts tail parents loc modify root stream nil
maps given function across zipper covariant functor pattern param map applied label every node tree fmap stream lefts rights parents
returns zipper tree possible permutations comonad pattern becomes focused node positions unfold dwn stream uf left right option none parent
maps given function tree positions zipper comonad pattern returns results application param map cobind
returns natural number equal given big integer param optional none less zero option compare
returns natural number equal given param optional none less zero option big integer value
add two natural numbers together param number one sum value
subtract natural number another param one difference two numbers larger given otherwise none option value
multiply natural number another param one product two numbers value
divide natural number another param one quotient highest less equal given divides value
take remainder natural number division param divide one given mod value
divide natural number another yielding quotient remainder param one order divmod big integer value
value natural number
value natural number
value natural number
value natural number
evaluate action sequence left right collect results state list fold acc ts flat map cons constant nil reverse
map element structure action evaluate actions left right collect results state list traverse fold acc flat bs cons constant nil reverse
constructs lazy string param construct characters given str stream unfold option character integer none length
constructs lazy string stream characters param given character
length lazy string note operation
returns caracter specified index param character returned
gets specified subsequence lazy string operation fail indexes bounds start index past end resulting character sequence empty truncated param containing sub stream drop take
returns string representation lazy eager builder length foreach effect append value
appends given lazy string end param cs append one concatenation stream
returns given lazy string substring param cs find otherwise contains tails map compose starts stream
returns given lazy string suffix param cs find end otherwise ends reverse starts
returns given lazy string prefix param cs find start otherwise starts empty equal head tail
returns first character string error empty head
returns first character string error empty lazy tail stream
checks string empty characters otherwise
returns reverse string lazy stream
returns first index given character lazy string present param find none option integer equal
returns first index given substring lazy string present param cs find none option integer substreams
regular expression pattern matching param regex match lazy string mathches given otherwise matches
splits lazy string characters matching given predicate param matches considered delimiters stream substrings separated split character find drop ws empty nil cons
joins given stream lazy strings one separated newlines param str join string consisting unlines intersperse map
joins given stream lazy strings one separated spaces param str join string consisting unwords intersperse map
zero equal param equality
zero equal anything nat succ
zero equal anything nat succ
number equal another predecessors nat bool succ
sum zero number nat add succ
sum zero number nat add succ
sum numbers one greater predecessor nat add succ
creates vector head tail param value put first element representing cons
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
returns iterator elements vector stream
returns nonempty list elements vector non empty nel head tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
returns iterator elements vector stream
maps given function across vector param map applied element inner split
performs function application within vector applicative functor pattern param vf functions apply zipping given inner split
zips vector given using function produce param bs zip results apply map
creates vector head tail param value put first element representing cons
returns iterator elements vector stream
returns nonempty list elements vector non empty nel tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
creates vector head tail param value put first element representing cons
returns iterator elements vector stream
returns nonempty list elements vector non empty nel tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
creates vector head tail param value put first element representing cons
returns iterator elements vector stream
returns nonempty list elements vector non empty nel tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
creates vector head tail param value put first element representing cons
returns iterator elements vector stream
returns nonempty list elements vector non empty nel tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
creates vector head tail param value put first element representing cons
returns iterator elements vector stream
returns nonempty list elements vector non empty nel tail
returns stream elements vector cons head tail
maps given function across vector param map applied element head tail
performs function application within vector applicative functor pattern param vf functions apply zipping given head tail
zips vector given using function produce param bs zip results apply map
empty set param ord order type elements
checks given element member set param check membership empty ord less head
inserts given element set param insert inserted ins make black
returns iterator set stream
maps given function across set param order elements map results applying ord iterable stream
folds set using given monoid param transformation elements fold result folding map empty zero sum head
folds set right using given monoid param transformation elements fold result folding map empty zero sum head
returns java util hash set representation stream collection
returns java util tree set representation stream collection
returns java util list representation set array stream collection
returns stream representation set empty nil cons head append
returns stream representation set reverse order empty nil cons head append
add elements given set param containing sets union iterable ord stream append
filters elements set returning produce code given function applied param predicate filter whose match iterable ord stream
remove elements set occur given param retain intersection intersect filter member
remove elements set occur given param delete contains minus filter compose member
splits set given element returns product ul li containing elements less value option equal one found otherwise none greater param split two sets optional first valueand second empty ord head ordering compare lg insert union
find element equal given one param compare set none option lookup empty head ordering ord
find largest element smaller given one param compare set none option lookup empty head ordering ord
find smallest element greater given one param compare set none option lookup empty head ordering ord
find largest element smaller equal given one param compare set none option lookup empty head ordering ord
find smallest element greater equal given one param compare set none option lookup empty head ordering ord
returns set subset given param superset method empty option find split head
join set sets single param order elements given ord id identity fold map monoid
elements given iterable set param order add containing ord empty insert
returns code two given arguments equal otherwise param object test equality another def
returns code two given arguments equal otherwise param object test inequality another def
partially applied equality check param object test another function returns code given argument equals method def equal
maps given function across equal contra variant functor param map contramap definition ea def override compose
constructs equal instance given function java users use link def definition instead param construct
constructs equal instance given definition param function def
constructs equal instance given alternative definition param function def alt
equal instance product param ea equality across first element contramap
equal instance product param ea equality across first element eb second definition def
equal instance product param ea equality across first element eb second ec third definition def
equal instance product param ea equality across first element eb second ec third ed fourth definition def
equal instance product param ea equality across first element eb second ec third ed fourth ee fifth definition def
equal instance product param ea equality across first element eb second ec third ed fourth ee fifth ef sixth definition def
equal instance product param ea equality across first element eb second ec third ed fourth ee fifth ef sixth eg seventh definition def
equal instance product param ea equality across first element eb second ec third ed fourth ee fifth ef sixth eg seventh eh eighth definition def
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance vector param ea equality across elements stream contramap
equal instance heterogeneous lists param equality first element list rest cons definition def head tail
equal instance sets param equality set elements stream contramap
helper method implement link object equals correctly purpose param clazz implemented self reference comparison equal instance type use generic suppress warnings unchecked java lang
helper method implement link object equals correctly purpose param clazz implemented self reference comparison equal lazy instance type use generic suppress warnings unchecked java lang
applies given function arguments another arity param whose apply fed passed compose
joins two arguments function arity one argument yielding param whose join substituted parameters em bind identity
constructs strategy given evaluation function param execution uses evaluate product 1s
apply strategy given product param evaluate according yields value calling par
waits every future list obtain value collects values param xs futures get extracted argument merge map strategy
evaluates list product 1s parallel param ps evaluate values argument par sequence map
maps given function list parallel using strategy param map bs product returns elements transformed par sequence concurry
maps given function array parallel using strategy param map bs product returns elements transformed par sequence concurry
binds given function parallel across list using strategy join param use parallelization bind containing result map operation par flat
binds given function parallel across array using strategy join param use parallelization bind containing result map operation par flat
sequentially evaluates chunks sub sequences list parallel splits evaluating simultaneously chunk sequence param strategy use parallelization length evaluate product containing results extracted given 1s par map join partition
zips together two lists parallel using given function strategy calls corresponding pair position wise passing elements first list argument second yielding results length remaining longer ignored param arity zip bs cs calling par sequence concurry
zips together two arrays parallel using given function strategy calls corresponding pair position wise passing elements first array argument second yielding results length remaining longer ignored param arity zip bs cs calling par sequence concurry
constructor method par param parallel strategy uses given parallelism unit
takes promise valued function applies element given list yielding results param map across applied sequence
takes promise valued function applies element given stream yielding results param map across applied sequence
maps concurrent function product inside promise param across map promised result mapping given sequence
maps across nonempty list parallel param non empty map function given promise applied element par fmap
maps across array parallel param map function given promise applied element par stream fmap
maps function across zipper parallel param za map given promise applied element par rights apply focus lefts fmap curry
maps function across tree parallel param ta map given promise applied element par sub forest stream apply root fmap node
maps function across tree zipper parallel param za map given promise applied element par tf fmap stream apply rights lefts
zips two lists together given function parallel param list zip another bs promise results applying across lockstep par sequence uncurry
zips two streams together given function parallel param stream zip another bs promise results applying across stepwise par sequence uncurry
zips two arrays together given function parallel param array zip another bs promise results applying across stepwise par stream fmap
maps given function across stream parallel folding monoid param map reduce sum results promise result mapping par fold empty zero left lift
maps given function across positions zipper parallel param za extend promise results applying givenzipper par map
maps given function across subtrees tree parallel param ta extend promise results applying par map cojoin
maps given function across positions tree zipper parallel param za extend promise results applying thegiven par map
maps given function across sublists non empty list parallel param extend promise results applying thegiven par map tails
promises provide value given product future represents unit function param strategy fulfil promise evaluate concurrently representing result evaluating mk actor act either left
promises send value given actor future param receive promise act either right
turns promise join function monad give param promised id identity bind
binds given function promise join bind monad param result applying promised value mk actor ab effect act either left contramap
performs function application within promise applicative functor pattern param pf promised apply applying given bind fmap
binds given function promise join param pb bind apply promised values performing map fmap
performs right fold reduction across list constant stack space param strategy function apply element beginning value start application result promise unit empty lift head join curry tail
performs right fold reduction across stream constant stack space param strategy function apply element beginning value start application result promise unit empty lift head join lazy tail fmap
waits necessary computation complete retrieves result promised value claim await interrupted exception error
waits necessary computation complete retrieves result param timeout maximum time wait unit argument promised value none reached option claim await interrupted exception error
returns promise fulfilled
applies stream comonadic functions promise returning values param fs apply results applying given sequence empty nil cons head tail
actor equipped queue guaranteed process one message time respect enqueueing thread messages order sent strategy unit effect ea seq atomic suspended concurrent linked mbox processor override poll par set work offer empty compare
creates actor uses given parallelization strategy side effect param use apply messages passed unit curry
creates actor uses given parallelization strategy side effect param use function projection apply messages passed unit
pass message actor applying side effect applied concurrent computation resulting product referencing param send unit represents action running concurrently act
binds given function value callable join param apply result applying second argument first bind call
turns list callables single callable param transform given sequence fold right lift cons nil
turns given either value equivalent callable param exception wrap left right
turns optional value callable param turn yields exception option
normalises given callable calling wrapping result exception resulting param evaluate normalised returns normalise call
simple connector gets connections given database driver manager param url connect generates string connection exception get
creates database state reader given connection param url reads db string driver manager rollback
creates database state writer given connection param url writes db string driver manager commit
returns reader reads database via given connector param pc generate connections db state rollback
returns writer writes database via given connector param pc generate connections db state commit
runs given database action single transaction param dba run result running exception error connection pc connect set auto commit runtime rollback re add suppressed terminal
constructs pure computation results given value param result trampoline
suspends given computation thunk param trampoline suspended whose next step runs suspend
returns queue unique integer priorities gen priority arb aa set ord list ints map si alp bind li empty enqueue
applies given size random generator produce value param use generated gen rand
maps given function across generator param map applying mapping gen
executes side effect generated result using given arguments param size generate apply random generator execute value unit foreach integer rand
executes side effect generated result using given arguments param size generate apply random generator execute value foreach integer rand
binds given function across generator produce param bind binding gen
binds given function across generator produce param gb second bind binding gen apply map
binds given function across generator generators produce param gb second bind gc third binding gen apply
binds given function across generator generators produce param gb second bind gc third gd fourth binding gen apply
binds given function across generator generators produce param gb second bind gc third gd fourth ge fifth binding gen apply
binds given function across generator generators produce param gb second bind gc third gd fourth ge fifth gf sixth binding gen apply
binds given function across generator generators produce param gb second bind gc third gd fourth ge fifth gf sixth gg seventh binding gen apply
binds given function across generator generators produce param gb second bind gc third gd fourth ge fifth gf sixth gg seventh gh eighth binding gen apply
function application within generator produce param gf apply gen bind map
resizes generator given size param uses gen resize
returns generator uses given function param use gen integer rand
constructs generator access construction arguments mdash size random param function gen parameterised integer rand curry
returns generator always produces given value param produce gen
returns generator never value gen fail error failing
construct property argument given value number shrinks param arg
produces generator independent given using value param produce suppress warnings unchecked gen variant gx memo get reseed put
returns result applying given size random generator param use obtain prop rand
performs conjunction property given param perform gen bind res exception falsified proven unfalsified result
performs disjunction property given param perform gen bind res exception falsified proven unfalsified result
performs sequence property given returned holds also hold one produce result param gen bind res exception proven unfalsified falsified
checks property using given arguments produces result param random generator use checking min successful minimum number tests reached max discarded maximum satisfypre conditions link implies size suppress warnings throwable method call ignored check rand sz res round exhausted proven args unfalsified passed falsified exception prop gen
returns property produces result given condition satisfies taken param satisfied implies
returns property given function param construct returned prop integer rand result
returns property always given result param returned prop integer
returns results names checking properties given classes param check random generator use categories specified allcandidate returned otherwise category omitted latter list string result java lang rand join map
returns results names checking properties given classes param check random generator use categories specified allcandidate returned otherwise category omitted latter list string result java lang rand array
returns results names checking properties given param check random generator use categories specified allcandidate returned otherwise category omitted latter list string result java lang rand array
check given categories least one command line argument name must passed error message results param args first zero main string length system err println category exit array list tail foreach effect summary print found exception stack trace
returns result property passed param succeeded number checks discarded check option none
returns result property proven param args arguments used prove succeeded number checks discarded check list arg option none
returns result property falsified param args arguments used falsify succeeded number checks discarded check list arg option none
returns result property exhausted checking param succeeded number checks discarded check option none
returns result checking property threw exception param args arguments used thrown ex succeeded number checks discarded check prop list arg throwable
returns result generating values check property threw exception param ex thrown succeeded number checks discarded gen throwable option none
rendering check result summarises one line param sa arguments show summary arg string test succeeded tests list args length argument head suppress warnings throwable method call ignored proven property passed discarded falsified exhausted gave prop exception writer sw print pw stack trace evaluation strings separator gen generation decons get
rendering check result summarises one line exception failure falsified property generator param sa arguments inthe show summary ex arg string proven passed exhausted prop gen error decons get
arbitrary functions param cogen function domain codomain gen arb promote
arbitrary lcg rng gen arb map
arbitrary functions param function codomain gen arb invariant map constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
arbitrary function param codomain gen arb invariant map compose uncurry constant
returns arbitrary implementation disjoint union param aa type one side isdefined ab suppress warnings unchecked gen either arb left map right list
returns arbitrary validation given parameters gen arb aa ab bind bool map success fail
returns arbitrary implementation throwables param used throwable message gen arb string map
returns arbitrary implementation java enumeration param clazz type instances supplied gen arb value elements get constants
result proven alter unfalsified arguments otherwise code args
adds argument result param add arg list cons args map
returns result given potential param may link option
returns result representing option none
returns unfalsified result param args arguments used failure falsification list arg option none
returns falsified result param args arguments used falsification list arg option none
returns proven result param args arguments used proof list arg option none
returns exception result param args arguments used occurred list arg throwable
randomly chooses value given range inclusive param seed use random generation minimum choose maximum
randomly chooses value given range inclusive param minimum choose maximum random option none
randomly chooses value given range inclusive param seed use random generation minimum choose maximum
randomly chooses value given range inclusive param minimum choose maximum random option none
returns shrink given argument param stream
constructs shrink strategy given function produces tree values value param avalue stream
set want rows height equal value passed code max row param fixed ensure size calculator
max height row could fixed enabled via code set given value used param grow size calculator
find first visible position scrap children layout views returning number pixels laid could greater entire view useful scroll functions param direction filling grid dy vertical offset creating gap need fill empty top begin pre recycler state child row sparse array cache get count start left padding decorated previous height size put cached value detach pending next current item header measure margins measured width content rows limit end attach remove add right bottom removing recycle filled
