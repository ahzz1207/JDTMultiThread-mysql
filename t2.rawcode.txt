public void submitTag(){   final TagView inputTag=getInputTag();   if (inputTag != null && inputTag.isInputAvailable()) {     inputTag.endInput();     if (mOnTagChangeListener != null) {       mOnTagChangeListener.onAppend(TagGroup.this,inputTag.getText().toString());     }     appendInputTag();   } } 
public String getInputTagText(){   final TagView inputTagView=getInputTag();   if (inputTagView != null) {     return inputTagView.getText().toString();   }   return null; } 
public String[] getTags(){   final int count=getChildCount();   final List<String> tagList=new ArrayList<>();   for (int i=0; i < count; i++) {     final TagView tagView=getTagAt(i);     if (tagView.mState == TagView.STATE_NORMAL) {       tagList.add(tagView.getText().toString());     }   }   return tagList.toArray(new String[tagList.size()]); } 
protected void appendInputTag(String tag){   final TagView previousInputTag=getInputTag();   if (previousInputTag != null) {     throw new IllegalStateException("Already has a INPUT tag in group.");   }   final TagView newInputTag=new TagView(getContext(),TagView.STATE_INPUT,tag);   newInputTag.setOnClickListener(mInternalTagClickListener);   addView(newInputTag); } 
protected void appendTag(CharSequence tag){   final TagView newTag=new TagView(getContext(),TagView.STATE_NORMAL,tag);   newTag.setOnClickListener(mInternalTagClickListener);   addView(newTag); } 
